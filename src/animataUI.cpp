// generated by Fast Light User Interface Designer (fluid) version 1.0107

#include "animataUI.h"

void AnimataUI::cb_New_i(Fl_Menu_*, void*) {
  editorBox->newScene();
}
void AnimataUI::cb_New(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void AnimataUI::cb_Open_i(Fl_Menu_*, void*) {
  char *file = fl_file_chooser("Open File", "*.nmt", "", 1);
if (file != NULL)
{
	editorBox->loadScene(file);
	editorBox->setFilename(file);
};
}
void AnimataUI::cb_Open(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void AnimataUI::cb_Import_i(Fl_Menu_*, void*) {
  char *file = fl_file_chooser("Open File", "*.nmt", "", 1);
if (file != NULL)
{
	editorBox->importScene(file);
};
}
void AnimataUI::cb_Import(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Import_i(o,v);
}

void AnimataUI::cb_Save_i(Fl_Menu_* o, void* v) {
  const char *filename = editorBox->getFilename();
if (filename[0] == 0)
{
	cb_Save1(o, v);
	return;
}
else
{
	editorBox->saveScene(filename);
};
}
void AnimataUI::cb_Save(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void AnimataUI::cb_Save1_i(Fl_Menu_*, void*) {
  char *newfile = fl_file_chooser("Save As", "*.nmt", "", 1);
if (newfile != NULL)
{
	editorBox->saveScene(newfile);
	editorBox->setFilename(newfile);
};
}
void AnimataUI::cb_Save1(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void AnimataUI::cb_Quit_i(Fl_Menu_*, void*) {
  //Fl::delete_widget(window);
exit(0);
}
void AnimataUI::cb_Quit(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void AnimataUI::cb_About_i(Fl_Menu_*, void*) {
  fl_message("Animata\n\nKitchen Budapest\n\nhttp://kibu.hu/projects/animata");
}
void AnimataUI::cb_About(Fl_Menu_* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_About_i(o,v);
}

Fl_Menu_Item AnimataUI::menu_[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"&New", 0x4006e,  (Fl_Callback*)AnimataUI::cb_New, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Open", 0x4006f,  (Fl_Callback*)AnimataUI::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Import", 0x40069,  (Fl_Callback*)AnimataUI::cb_Import, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Save", 0x40073,  (Fl_Callback*)AnimataUI::cb_Save, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"Save &As", 0x50073,  (Fl_Callback*)AnimataUI::cb_Save1, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&Quit", 0x40071,  (Fl_Callback*)AnimataUI::cb_Quit, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Help", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 12, 0},
 {"Animata Help", 0xffbe,  0, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {"&About", 0,  (Fl_Callback*)AnimataUI::cb_About, 0, 0, FL_NORMAL_LABEL, 0, 12, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void AnimataUI::cb_tabs_i(Fl_Tabs* o, void*) {
  /* callback to reset the active button when the tab
   is selected again */
settings.mode = ANIMATA_MODE_NONE;

Fl_Tabs* t = (Fl_Tabs*)o;

Fl_Group* g = (Fl_Group*)(t->value());

if(g == imagePanel)
{
	g = imageButtons;
}

int n = g->children();

for (int i = 0; i < n; ++i)
{
	Fl_Button *b = (Fl_Button *)(g->child(i));
	if (b->value())
	{
		b->do_callback();
	}
}

editorBox->take_focus();
}
void AnimataUI::cb_tabs(Fl_Tabs* o, void* v) {
  ((AnimataUI*)(o->parent()->user_data()))->cb_tabs_i(o,v);
}

void AnimataUI::cb_Add_i(Fl_Button*, void*) {
  fileChooser->show();

while(fileChooser->visible())
	Fl::wait();

int count = fileChooser->count();

for(int i = 1; i <= count; i++)
{
	const char *filename = fileChooser->value(i);
	loadImage(filename);
};
}
void AnimataUI::cb_Add(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Add_i(o,v);
}

void AnimataUI::cb_Move_i(Fl_Button*, long v) {
  settings.mode = (ANIMATA_MODES)(unsigned)v;
}
void AnimataUI::cb_Move(Fl_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Move_i(o,v);
}

void AnimataUI::cb_Create_i(Fl_Button*, long v) {
  /* callback is created in fluid as a static member called cb_Create, which
is used in all the button callbacks, because i have no idea how to create a
callback using a code block, which is static.
*/

settings.prevMode = settings.mode; /* save previous mode to detect mode changes */
settings.mode = (ANIMATA_MODES)(unsigned)v;
}
void AnimataUI::cb_Create(Fl_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Create_i(o,v);
}

void AnimataUI::cb_Triangulate_i(Fl_Button* o, void*) {
  editorBox->triangulate();
o->clear();
}
void AnimataUI::cb_Triangulate(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Triangulate_i(o,v);
}

void AnimataUI::cb_Texturize_i(Fl_Button* o, long) {
  Texture *texture = editorBox->getTextureManager()->getActiveTexture();

if(texture)
	editorBox->getMesh()->attachTexture(texture);

o->clear();
}
void AnimataUI::cb_Texturize(Fl_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Texturize_i(o,v);
}

void AnimataUI::cb_threshold_i(Fl_Value_Slider* o, void*) {
  settings.triangulateAlphaThreshold = (int)(o->value());
}
void AnimataUI::cb_threshold(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_threshold_i(o,v);
}

void AnimataUI::cb_jointName_i(Fl_Input* o, void*) {
  editorBox->setJointPrefsFromUI(o->value());
}
void AnimataUI::cb_jointName(Fl_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointName_i(o,v);
}

void AnimataUI::cb_jointX_i(Fl_Value_Input* o, void*) {
  editorBox->setJointPrefsFromUI(NULL, o->value());
}
void AnimataUI::cb_jointX(Fl_Value_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointX_i(o,v);
}

void AnimataUI::cb_jointY_i(Fl_Value_Input* o, void*) {
  editorBox->setJointPrefsFromUI(NULL, FLT_MAX, o->value());
}
void AnimataUI::cb_jointY(Fl_Value_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointY_i(o,v);
}

void AnimataUI::cb_jointFixed_i(Fl_Check_Button* o, void*) {
  editorBox->setJointPrefsFromUI(NULL, FLT_MAX, FLT_MAX, o->value());
}
void AnimataUI::cb_jointFixed(Fl_Check_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_jointFixed_i(o,v);
}

void AnimataUI::cb_boneName_i(Fl_Input* o, void*) {
  editorBox->setBonePrefsFromUI(o->value());
}
void AnimataUI::cb_boneName(Fl_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneName_i(o,v);
}

void AnimataUI::cb_boneStiffness_i(Fl_Eval_Slider* o, void*) {
  editorBox->setBonePrefsFromUI(NULL, o->value());
}
void AnimataUI::cb_boneStiffness(Fl_Eval_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneStiffness_i(o,v);
}

void AnimataUI::cb_boneLengthMult_i(Fl_Value_Slider* o, void*) {
  float m = o->value();
float mil = boneLengthMultMin->value();
float mal = boneLengthMultMax->value();
if (m < mil)
{
	m = mil;
	o->value(m);
}
else if (m > mal)
{
	m = mal;
	o->value(m);
}
editorBox->setBonePrefsFromUI(NULL, -1, m);
}
void AnimataUI::cb_boneLengthMult(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneLengthMult_i(o,v);
}

void AnimataUI::cb_boneLengthMultMin_i(Fl_Value_Slider* o, void*) {
  float mmin = o->value();
editorBox->setBoneLengthMultMin(mmin);

float mult = boneLengthMult->value();
if (mult < mmin)
{
	boneLengthMult->value(mmin);
	editorBox->setBonePrefsFromUI(NULL, -1, mmin);
};
}
void AnimataUI::cb_boneLengthMultMin(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneLengthMultMin_i(o,v);
}

void AnimataUI::cb_boneLengthMultMax_i(Fl_Value_Slider* o, void*) {
  float mmax = o->value();
editorBox->setBoneLengthMultMax(mmax);

float mult = boneLengthMult->value();
if (mmax < mult)
{
	boneLengthMult->value(mmax);
	editorBox->setBonePrefsFromUI(NULL, -1, mmax);
};
}
void AnimataUI::cb_boneLengthMultMax(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneLengthMultMax_i(o,v);
}

void AnimataUI::cb_boneTempo_i(Fl_Value_Slider* o, void*) {
  editorBox->setBoneTempo(o->value());
}
void AnimataUI::cb_boneTempo(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_boneTempo_i(o,v);
}

void AnimataUI::cb_attachArea_i(Fl_Value_Slider* o, void*) {
  editorBox->setAttachPrefsFromUI(o->value());
}
void AnimataUI::cb_attachArea(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_attachArea_i(o,v);
}

void AnimataUI::cb_attachFalloff_i(Fl_Value_Slider* o, void*) {
  editorBox->setAttachPrefsFromUI(FLT_MAX, o->value());
}
void AnimataUI::cb_attachFalloff(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_attachFalloff_i(o,v);
}

void AnimataUI::cb_Attach_i(Fl_Button* o, void*) {
  editorBox->attachVertices();
o->clear();
}
void AnimataUI::cb_Attach(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Attach_i(o,v);
}

void AnimataUI::cb_Disattach_i(Fl_Button* o, void*) {
  editorBox->disattachVertices();
o->clear();
}
void AnimataUI::cb_Disattach(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Disattach_i(o,v);
}

void AnimataUI::cb_play_i(Fl_Light_Button* o, void*) {
  settings.playSimulation = o->value();
}
void AnimataUI::cb_play(Fl_Light_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_play_i(o,v);
}

void AnimataUI::cb_iteration_i(Fl_Value_Slider* o, void*) {
  settings.iteration = (int)(o->value());
}
void AnimataUI::cb_iteration(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_iteration_i(o,v);
}

void AnimataUI::cb_gravity_i(Fl_Light_Button* o, void*) {
  settings.gravity = o->value();
}
void AnimataUI::cb_gravity(Fl_Light_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_gravity_i(o,v);
}

void AnimataUI::cb__i(Fl_Value_Slider* o, void*) {
  settings.gravityForce = (float)(o->value());
}
void AnimataUI::cb_(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

void AnimataUI::cb_1_i(Fl_Dial* o, void*) {
  float a = M_PI*o->value()/180;

settings.gravityX = -sin(a);
settings.gravityY = cos(a);
}
void AnimataUI::cb_1(Fl_Dial* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void AnimataUI::cb_Add1_i(Fl_Button*, void*) {
  Flu_Tree_Browser::Node* n = layerTree->get_selected(1);

if (!n)
{
    n = layerTree->get_root();
}

Layer *layer = (Layer *)n->user_data();

if (layer)
{
  Layer *newLayer = layer->makeLayer();

  Flu_Tree_Browser::Node *newNode = n->add(newLayer->getName());
  newNode->user_data(newLayer);
  layers->redraw();
};
}
void AnimataUI::cb_Add1(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Add1_i(o,v);
}

void AnimataUI::cb_Delete_i(Fl_Button*, void*) {
  int n = layerTree->num_selected();

if (!n)
  return;

for (int i = n; i >= 1; i--)
{
  Flu_Tree_Browser::Node* node = layerTree->get_selected(i);
  Layer *layer = (Layer *)node->user_data();

  Layer *parent = layer->getParent();

  if (parent)
  {
    // fprintf(stderr, "deleting layer %x\n", layer);
    // fflush(stderr);

    // set the root layer as current
    editorBox->setCurrentLayer(editorBox->getRootLayer());

    // delete current layer
    int r = parent->deleteSublayer(layer);
    if (r) // error deleting sublayer
    {
      fprintf(stderr, "error deleting %s (%x)\n", layer->getName(), layer);
      continue;
    }
    selector->cancelPickLayer();
  }
  else
  {
    fprintf(stderr, "parent is NULL %s (%x)\n", layer->getName(), layer);
    continue;
  }
  layerTree->remove(node);
}
layers->redraw();
}
void AnimataUI::cb_Delete(Fl_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_Delete_i(o,v);
}

void AnimataUI::cb_layerName_i(Fl_Input* o, void*) {
  tempStorage.str = o->value();
editorBox->setLayerPrefsFromUI(PREFS_LAYER_NAME, &tempStorage);

Flu_Tree_Browser::Node* n = layerTree->get_selected(1);
if (n)
{    
    n->label(o->value());
};
}
void AnimataUI::cb_layerName(Fl_Input* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_layerName_i(o,v);
}

void AnimataUI::cb_layerAlpha_i(Fl_Value_Slider* o, void*) {
  tempStorage.f = o->value();
editorBox->setLayerPrefsFromUI(PREFS_LAYER_ALPHA, &tempStorage);
}
void AnimataUI::cb_layerAlpha(Fl_Value_Slider* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_layerAlpha_i(o,v);
}

void AnimataUI::cb_layerVisible_i(Fl_Check_Button* o, long) {
  tempStorage.i = o->value();
editorBox->setLayerPrefsFromUI(PREFS_LAYER_VISIBILITY, &tempStorage);
}
void AnimataUI::cb_layerVisible(Fl_Check_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_layerVisible_i(o,v);
}

void AnimataUI::cb_Vertex_i(Fl_Check_Button* o, long v) {
  if (o->value())
{
	((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->settings.display_elements |=
		(unsigned)v;
}
else
{
	((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->settings.display_elements &=
		~(unsigned)v;

};
}
void AnimataUI::cb_Vertex(Fl_Check_Button* o, long v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Vertex_i(o,v);
}

void AnimataUI::cb_show_i(Fl_Check_Button* o, void*) {
  if(o->value())
{
  //playback->border(0); 
  playback->show();
  //playback->set_visible();
}
else
{
  playback->hide();
  //playback->clear_visible();
};
}
void AnimataUI::cb_show(Fl_Check_Button* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->parent()->user_data()))->cb_show_i(o,v);
}

void AnimataUI::cb_layerTree_i(Flu_Tree_Browser*, void*) {
  Flu_Tree_Browser::Node* n = layerTree->get_selected(1);

if (n)
// && n != layerTree->get_root())
{
	Layer *l = (Layer *)n->user_data();
    
	if (l)
	{
		editorBox->setCurrentLayer(l);
		editorBox->setLayerUIPrefs(l);
	}
}

window->redraw();
}
void AnimataUI::cb_layerTree(Flu_Tree_Browser* o, void* v) {
  ((AnimataUI*)(o->parent()->parent()->user_data()))->cb_layerTree_i(o,v);
}

AnimataUI::AnimataUI() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = window = new Fl_Double_Window(855, 650, "animata");
    w = o;
    o->box(FL_BORDER_BOX);
    o->color(FL_FOREGROUND_COLOR);
    o->selection_color(FL_BACKGROUND2_COLOR);
    o->user_data((void*)(this));
    { Fl_Menu_Bar* o = new Fl_Menu_Bar(0, 0, 900, 20);
      o->box(FL_BORDER_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color((Fl_Color)30);
      o->selection_color((Fl_Color)30);
      o->labelsize(12);
      o->labelcolor(FL_BACKGROUND2_COLOR);
      o->textfont(4);
      o->textcolor(7);
      o->menu(menu_);
    }
    { Fl_Tabs* o = tabs = new Fl_Tabs(0, 500, 2048, 160, "tabs");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)21);
      o->selection_color((Fl_Color)3);
      o->callback((Fl_Callback*)cb_tabs);
      o->align(FL_ALIGN_CENTER);
      { Fl_Group* o = imagePanel = new Fl_Group(0, 520, 2048, 140, "Image");
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Group* o = imageButtons = new Fl_Group(5, 530, 105, 120, "Image Buttons");
          o->labeltype(FL_NO_LABEL);
          { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Add Image");
            o->box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Add);
          }
          { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Move");
            o->type(102);
            o->box(FL_BORDER_BOX);
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Move, (void*)(ANIMATA_MODE_TEXTURE_POSITION));
          }
          { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Scale");
            o->type(102);
            o->box(FL_BORDER_BOX);
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Move, (void*)(ANIMATA_MODE_TEXTURE_SCALE));
          }
          o->resizable(NULL);
          o->end();
        }
        { Fl_Scroll* o = imageScrollArea = new Fl_Scroll(135, 535, 710, 106);
          o->box(FL_FLAT_BOX);
          o->color((Fl_Color)36);
          o->selection_color((Fl_Color)36);
          { Fl_Pack* o = imagePack = new Fl_Pack(140, 540, 700, 80);
            o->type(1);
            o->color((Fl_Color)36);
            o->selection_color((Fl_Color)36);
            o->spacing(10);
            o->end();
          }
          o->end();
        }
        o->resizable(imageScrollArea);
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "Mesh");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Create Vertex");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_VERTEX));
        }
        { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Create Triangle");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_TRIANGLE));
          /* how to create static callbacks? */
        }
        { Fl_Button* o = new Fl_Button(110, 554, 90, 20, "Triangulate");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Triangulate);
        }
        { Fl_Button* o = new Fl_Button(15, 573, 90, 20, "Texturize");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Texturize, (void*)(ANIMATA_MODE_TEXTURIZE));
        }
        { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Select / Move");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_MESH_SELECT));
        }
        { Fl_Button* o = new Fl_Button(15, 625, 90, 20, "Delete");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_MESH_DELETE));
        }
        { Fl_Value_Slider* o = new Fl_Value_Slider(208, 556, 175, 17, "threshold");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labeltype(FL_NO_LABEL);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->maximum(255);
          o->step(1);
          o->value(100);
          o->textcolor(7);
          o->callback((Fl_Callback*)cb_threshold);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        o->resizable(NULL);
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "Skeleton");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Create Joint");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_JOINT));
        }
        { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Create Bone");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_CREATE_BONE));
        }
        { Fl_Button* o = new Fl_Button(15, 573, 90, 20, "Attach Vertices");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_ATTACH_VERTICES));
        }
        { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Select / Move");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_SKELETON_SELECT));
        }
        { Fl_Button* o = new Fl_Button(15, 625, 90, 20, "Delete");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_SKELETON_DELETE));
        }
        { Fl_Tabs* o = skeletonPrefTabs = new Fl_Tabs(135, 535, 640, 110);
          o->box(FL_NO_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)30);
          { Fl_Group* o = jointPrefs = new Fl_Group(135, 535, 570, 110);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)30);
            o->hide();
            { Fl_Box* o = new Fl_Box(140, 539, 43, 16, "Joint");
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)30);
              o->labelfont(1);
              o->labelsize(12);
              o->labelcolor((Fl_Color)3);
              o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
            }
            { Fl_Input* o = jointName = new Fl_Input(185, 560, 200, 20, "Name:");
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)30);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->textsize(12);
              o->textcolor(22);
              o->callback((Fl_Callback*)cb_jointName);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Value_Input* o = jointX = new Fl_Value_Input(185, 585, 50, 20, "Pos: x ");
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)30);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->textsize(10);
              o->textcolor(16);
              o->callback((Fl_Callback*)cb_jointX);
              o->when(FL_WHEN_ENTER_KEY);
            }
            { Fl_Value_Input* o = jointY = new Fl_Value_Input(250, 585, 50, 20, "y ");
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)30);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->textsize(10);
              o->textcolor(16);
              o->callback((Fl_Callback*)cb_jointY);
              o->when(FL_WHEN_ENTER_KEY);
            }
            { Fl_Check_Button* o = jointFixed = new Fl_Check_Button(310, 585, 50, 20, "fixed");
              o->box(FL_BORDER_BOX);
              o->down_box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_jointFixed);
            }
            o->end();
          }
          { Fl_Group* o = bonePrefs = new Fl_Group(135, 535, 640, 110);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)30);
            { Fl_Box* o = new Fl_Box(140, 539, 43, 16, "Bone");
              o->labelfont(1);
              o->labelsize(12);
              o->labelcolor((Fl_Color)3);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            }
            { Fl_Input* o = boneName = new Fl_Input(185, 560, 200, 20, "Name:");
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)30);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->textsize(12);
              o->textcolor(22);
              o->callback((Fl_Callback*)cb_boneName);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Eval_Slider* o = boneStiffness = new Fl_Eval_Slider(185, 583, 250, 17, "Stiffness:");
              o->type(1);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labeltype(FL_NORMAL_LABEL);
              o->labelfont(0);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->minimum(0.16);
              o->maximum(0.840896);
              o->step(0.001);
              o->value(0.840896);
              o->textcolor(16);
              o->callback((Fl_Callback*)cb_boneStiffness);
              o->align(FL_ALIGN_LEFT);
              o->when(FL_WHEN_CHANGED);
            }
            { Fl_Value_Slider* o = boneLengthMult = new Fl_Value_Slider(481, 560, 250, 17, "Lm:");
              o->tooltip("Bone length multiplier");
              o->type(1);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->minimum(0.01);
              o->maximum(2);
              o->value(1);
              o->textcolor(16);
              o->callback((Fl_Callback*)cb_boneLengthMult);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Value_Slider* o = boneLengthMultMin = new Fl_Value_Slider(481, 581, 250, 17, "Min:");
              o->tooltip("Minimum of length multiplier");
              o->type(1);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->minimum(0.01);
              o->maximum(2);
              o->value(0.01);
              o->textcolor(16);
              o->callback((Fl_Callback*)cb_boneLengthMultMin);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Value_Slider* o = boneLengthMultMax = new Fl_Value_Slider(481, 600, 250, 17, "Max:");
              o->tooltip("Maximum of length multiplier");
              o->type(1);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->maximum(2);
              o->value(1);
              o->textcolor(16);
              o->callback((Fl_Callback*)cb_boneLengthMultMax);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Value_Slider* o = boneTempo = new Fl_Value_Slider(481, 620, 249, 17, "Tempo: ");
              o->type(1);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->step(0.001);
              o->textcolor(16);
              o->callback((Fl_Callback*)cb_boneTempo);
              o->align(FL_ALIGN_LEFT);
            }
            o->end();
          }
          { Fl_Group* o = attachVertices = new Fl_Group(135, 535, 570, 110);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)30);
            o->hide();
            { Fl_Box* o = new Fl_Box(140, 539, 110, 16, "Attach Vertices");
              o->labelfont(1);
              o->labelsize(12);
              o->labelcolor((Fl_Color)3);
              o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
            }
            { Fl_Value_Slider* o = attachArea = new Fl_Value_Slider(185, 560, 450, 17, "Area:");
              o->type(1);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->maximum(10);
              o->value(1);
              o->textcolor(22);
              o->callback((Fl_Callback*)cb_attachArea);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Value_Slider* o = attachFalloff = new Fl_Value_Slider(185, 580, 450, 17, "Falloff:");
              o->type(1);
              o->box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->minimum(0.01);
              o->value(1);
              o->textcolor(22);
              o->callback((Fl_Callback*)cb_attachFalloff);
              o->align(FL_ALIGN_LEFT);
            }
            { Fl_Button* o = new Fl_Button(140, 621, 100, 20, "Attach");
              o->box(FL_BORDER_BOX);
              o->down_box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_Attach);
            }
            { Fl_Button* o = new Fl_Button(245, 621, 100, 20, "Disattach");
              o->box(FL_BORDER_BOX);
              o->down_box(FL_BORDER_BOX);
              o->color((Fl_Color)30);
              o->selection_color((Fl_Color)3);
              o->labelsize(10);
              o->labelcolor(FL_BACKGROUND2_COLOR);
              o->callback((Fl_Callback*)cb_Disattach);
            }
            o->end();
          }
          { Fl_Group* o = noPrefs = new Fl_Group(135, 535, 570, 110);
            o->color((Fl_Color)35);
            o->selection_color((Fl_Color)35);
            o->hide();
            o->end();
          }
          o->end();
        }
        o->resizable(NULL);
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "Automata");
        o->box(FL_BORDER_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Light_Button* o = new Fl_Light_Button(15, 535, 95, 20, "play simulation");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->shortcut(0x20);
          o->color((Fl_Color)30);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_play);
        }
        { Fl_Value_Slider* o = new Fl_Value_Slider(15, 625, 220, 17, "iteration");
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->minimum(1);
          o->maximum(200);
          o->step(1);
          o->value(40);
          o->textcolor(7);
          o->callback((Fl_Callback*)cb_iteration);
          o->align(FL_ALIGN_TOP_LEFT);
        }
        { Fl_Light_Button* o = new Fl_Light_Button(25, 569, 95, 20, "gravity");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_gravity);
        }
        { Fl_Value_Slider* o = new Fl_Value_Slider(25, 588, 95, 17);
          o->type(1);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->value(0.5);
          o->textcolor(7);
          o->callback((Fl_Callback*)cb_);
          o->align(FL_ALIGN_RIGHT);
        }
        { Fl_Dial* o = new Fl_Dial(135, 570, 35, 35);
          o->type(1);
          o->box(FL_OVAL_FRAME);
          o->color(FL_FOREGROUND_COLOR);
          o->maximum(360);
          o->step(1);
          o->callback((Fl_Callback*)cb_1);
          o->angles(0, 360);
        }
        o->resizable(NULL);
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "Layer");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Button* o = new Fl_Button(15, 535, 90, 20, "Move");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->value(1);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_LAYER_MOVE));
        }
        { Fl_Button* o = new Fl_Button(15, 554, 90, 20, "Scale");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_LAYER_SCALE));
        }
        { Fl_Button* o = new Fl_Button(15, 573, 90, 20, "Depth");
          o->type(102);
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Create, (void*)(ANIMATA_MODE_LAYER_DEPTH));
        }
        { Fl_Button* o = new Fl_Button(15, 606, 90, 20, "Add");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Add1);
        }
        { Fl_Button* o = new Fl_Button(15, 625, 90, 20, "Delete");
          o->box(FL_BORDER_BOX);
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelsize(10);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_Delete);
        }
        { Fl_Group* o = new Fl_Group(135, 535, 570, 110);
          o->box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)30);
          { Fl_Box* o = new Fl_Box(140, 539, 43, 16, "Preferences");
            o->labelfont(1);
            o->labelsize(12);
            o->labelcolor((Fl_Color)3);
            o->align(FL_ALIGN_TOP_LEFT|FL_ALIGN_INSIDE);
          }
          { Fl_Input* o = layerName = new Fl_Input(195, 560, 250, 20, "Name:");
            o->box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)30);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->textsize(12);
            o->textcolor(22);
            o->callback((Fl_Callback*)cb_layerName);
            o->when(FL_WHEN_CHANGED);
          }
          { Fl_Value_Slider* o = layerAlpha = new Fl_Value_Slider(195, 583, 249, 17, "Alpha: ");
            o->type(1);
            o->box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->step(0.001);
            o->textcolor(16);
            o->callback((Fl_Callback*)cb_layerAlpha);
            o->align(FL_ALIGN_LEFT);
          }
          { Fl_Check_Button* o = layerVisible = new Fl_Check_Button(195, 605, 15, 20, "Visible: ");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_layerVisible);
            o->align(FL_ALIGN_LEFT);
          }
          o->end();
        }
        o->resizable(NULL);
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "Camera");
        o->box(FL_FLAT_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        o->resizable(NULL);
        o->end();
      }
      { Fl_Group* o = new Fl_Group(0, 525, 2048, 135, "View");
        o->box(FL_BORDER_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)30);
        o->labelsize(11);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->hide();
        { Fl_Group* o = new Fl_Group(5, 545, 70, 110, "Editor");
          o->color(FL_FOREGROUND_COLOR);
          o->selection_color((Fl_Color)22);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          { Fl_Check_Button* o = new Fl_Check_Button(10, 550, 65, 20, "Vertex");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_VERTEX));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(10, 570, 65, 20, "Triangle");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_TRIANGLE));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(10, 590, 65, 20, "Joint");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_JOINT));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(10, 610, 65, 20, "Bone");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_BONE));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(10, 630, 65, 25, "Texture");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_EDITOR_TEXTURE));
            o->do_callback();
          }
          o->end();
        }
        { Fl_Group* o = new Fl_Group(80, 545, 70, 110, "Output");
          o->color(FL_FOREGROUND_COLOR);
          o->selection_color((Fl_Color)22);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          { Fl_Check_Button* o = new Fl_Check_Button(85, 550, 65, 20, "Vertex");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_VERTEX));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(85, 570, 65, 20, "Triangle");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_TRIANGLE));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(85, 590, 65, 20, "Joint");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_JOINT));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(85, 610, 65, 20, "Bone");
            o->down_box(FL_BORDER_BOX);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_BONE));
            o->do_callback();
          }
          { Fl_Check_Button* o = new Fl_Check_Button(85, 630, 65, 25, "Texture");
            o->down_box(FL_BORDER_BOX);
            o->value(1);
            o->color((Fl_Color)30);
            o->selection_color((Fl_Color)3);
            o->labelsize(10);
            o->labelcolor(FL_BACKGROUND2_COLOR);
            o->callback((Fl_Callback*)cb_Vertex, (void*)(DISPLAY_OUTPUT_TEXTURE));
            o->do_callback();
          }
          o->end();
        }
        { Fl_Check_Button* o = new Fl_Check_Button(140, 525, 95, 25, "show / hide");
          o->down_box(FL_BORDER_BOX);
          o->color((Fl_Color)30);
          o->selection_color((Fl_Color)3);
          o->labelcolor(FL_BACKGROUND2_COLOR);
          o->callback((Fl_Callback*)cb_show);
        }
        o->resizable(NULL);
        o->end();
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { AnimataWindow* o = editorBox = new AnimataWindow(0, 20, 640, 480, "editor");
      o->box(FL_BORDER_BOX);
      o->color(FL_FOREGROUND_COLOR);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(FL_ALIGN_CENTER);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Group* o = layers = new Fl_Group(640, 20, 220, 501);
      o->color((Fl_Color)22);
      o->selection_color((Fl_Color)22);
      o->labeltype(FL_NO_LABEL);
      o->labelcolor(FL_GRAY0);
      { Flu_Tree_Browser* o = layerTree = new Flu_Tree_Browser(640, 20, 215, 501, "layers");
        o->box(FL_BORDER_BOX);
        o->color((Fl_Color)30);
        o->selection_color((Fl_Color)31);
        o->labeltype(FL_NO_LABEL);
        o->labelfont(0);
        o->labelsize(14);
        o->labelcolor(FL_BACKGROUND2_COLOR);
        o->callback((Fl_Callback*)cb_layerTree);
        o->align(FL_ALIGN_TOP);
        o->when(FL_WHEN_CHANGED);
        layerTree->auto_branches(true); layerTree->insertion_mode(FLU_INSERT_BACK);
        layerTree->always_open(true); /* root node is always open */
        layerTree->selection_drag_mode(FLU_DRAG_TO_MOVE); /* FIXME */
        o->end();
      }
      o->end();
    }
    o->resizable(editorBox);
    o->size_range(700, 500);
    o->end();
  }
  fileChooser = new Fl_File_Chooser(".", "Image Files (*.{jpg,png})", 1, "choose");
playback = new Playback(0, 0, 640, 480);
playback->getCamera()->setParent(editorBox->getCamera());
//editorBox->getCamera()->setClone(playback->getCamera()->setCloned());
}

void AnimataUI::show() {
  settings.mode = ANIMATA_MODE_TEXTURE_POSITION;
imagePanel->set_visible();
window->show();
}

void AnimataUI::fullscreen() {
  window->fullscreen();
}

void AnimataUI::resize(int x, int y, int w, int h) {
  window->resize(x, y, w, h);
}

ImageBox * AnimataUI::loadImage(const char *filename) {
  if (!filename)
	return NULL;

// check if this image is already loaded
for(int i = 0; i < imagePack->children(); i++)
{
	ImageBox *box = (ImageBox*)imagePack->child(i);

	if(!strcmp(filename, box->getFilename()))
		return box;
}

char *ext = strrchr(filename, '.');
Fl_Image *image = NULL;

if (strcmp(ext, ".jpg") == 0)
{
	image = new Fl_JPEG_Image(filename);
}
else
if (strcmp(ext, ".png") == 0)
{
	image = new Fl_PNG_Image(filename);
}
else
{
	return NULL;
}

if ((image->h() == 0) || (image->w() == 0))
	return NULL;

ImageBox* box = new ImageBox(filename, image, imagePack->x(), imagePack->y(), 80);
imagePack->add(box);

imageScrollArea->redraw();

return box;
}

AnimataUI::~AnimataUI() {
  delete editorBox;
delete fileChooser;
delete playback;
}

void AnimataUI::refreshLayerTree(Layer *root) {
  clearLayerTree();

Flu_Tree_Browser::Node* rootNode = layerTree->get_root();

rootNode->label(root->getName());
rootNode->user_data(root); //editorBox->getRootLayer());

for(unsigned i = 0; i < root->getLayers()->size(); i++)
{
  Layer *l = (*root->getLayers())[i];

  addLayerNodeRecursive(l, rootNode);
}

playback->setRootLayer(root);

layers->redraw();
}

void AnimataUI::clearLayerTree() {
  layerTree->clear();
layerTree->redraw();
}

void AnimataUI::addLayerNodeRecursive(Layer *layer, Flu_Tree_Browser::Node *node) {
  Flu_Tree_Browser::Node *newNode = node->add(layer->getName());

if (!newNode) /* probably branch duplication */ 
{
  /* try to modify name */
  char newName[512];
  snprintf(newName, 511, "%s", layer->getName());
  int len = strlen(newName) + 5;
  while (len < 512)
  {
    strcat(newName, " copy");
    newNode = node->add(newName);
    if (newNode)
    	break;
    len += 5;
  }
  if (!newNode)
    return;
}

newNode->user_data(layer);

std::vector<Layer *> *subLayers = layer->getLayers();

if(subLayers)
{
  for(unsigned i = 0; i < subLayers->size(); i++)
  {
    Layer *l = (*subLayers)[i];

    addLayerNodeRecursive(l, newNode);
  }
}
}
#include <FL/fl_draw.H>

Fl_Eval_Slider::Fl_Eval_Slider(int X, int Y, int W, int H, const char *L) : Fl_Slider(X, Y, W, H, L) {
  step(1, 100);
textfont_ = FL_HELVETICA;
textsize_ = 10;
textcolor_ = FL_FOREGROUND_COLOR;
}

void Fl_Eval_Slider::draw() {
  int sxx = x(), syy = y(), sww = w(), shh = h();
  int bxx = x(), byy = y(), bww = w(), bhh = h();
  if (horizontal()) {
    bww = 35; sxx += 35; sww -= 35;
  } else {
    syy += 25; bhh = 25; shh -= 25;
  }
  if (damage()&FL_DAMAGE_ALL) draw_box(box(),sxx,syy,sww,shh,color());
  Fl_Slider::draw(sxx+Fl::box_dx(box()),
          syy+Fl::box_dy(box()),
          sww-Fl::box_dw(box()),
          shh-Fl::box_dh(box()));
  draw_box(box(),bxx,byy,bww,bhh,color());
  char buf[128];
  snprintf(buf, 128, "%4.3f", value());
  //format(buf);
  fl_font(textfont(), textsize());
  fl_color(active_r() ? textcolor() : fl_inactive(textcolor()));
  fl_draw(buf, bxx, byy, bww, bhh, FL_ALIGN_CLIP);
}

int Fl_Eval_Slider::handle(int event) {
  if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
  }
  int sxx = x(), syy = y(), sww = w(), shh = h();
  if (horizontal()) {
    sxx += 35; sww -= 35;
  } else {
    syy += 25; shh -= 25;
  }
  return Fl_Slider::handle(event,
               sxx+Fl::box_dx(box()),
               syy+Fl::box_dy(box()),
               sww-Fl::box_dw(box()),
               shh-Fl::box_dh(box()));
}

Fl_Font Fl_Eval_Slider::textfont() const {
  return (Fl_Font)textfont_;
}

void Fl_Eval_Slider::textfont(uchar s) {
  textfont_ = s;
}

uchar Fl_Eval_Slider::textsize() const {
  return textsize_;
}

void Fl_Eval_Slider::textsize(uchar s) {
  textsize_ = s;
}

Fl_Color Fl_Eval_Slider::textcolor() const {
  return (Fl_Color)textcolor_;
}

void Fl_Eval_Slider::textcolor(unsigned s) {
  textcolor_ = s;
}

float Fl_Eval_Slider::eval(float f) {
  return pow(f, 4);
}

float Fl_Eval_Slider::evalinv(float f) {
  return pow(f, .25);
}

float Fl_Eval_Slider::value() {
  return eval(Fl_Slider::value());
}

void Fl_Eval_Slider::value(float f) {
  Fl_Slider::value(evalinv(f));
}
